#!/usr/bin/env node

/**
 * „Éê„É≥„Éâ„É´„Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ„Çπ„ÇØ„É™„Éó„Éà
 *
 * Áí∞Â¢ÉÂ§âÊï∞:
 *   MAX_BUNDLE_SIZE_MB: „Éê„É≥„Éâ„É´„Çµ„Ç§„Ç∫„ÅÆÊúÄÂ§ßÂÄ§ÔºàMBÂçò‰Ωç„ÄÅ„Éá„Éï„Ç©„É´„Éà: 1Ôºâ
 *
 * ‰ΩøÁî®‰æã:
 *   node scripts/check-bundle-size.js
 *   MAX_BUNDLE_SIZE_MB=2 node scripts/check-bundle-size.js
 */

const fs = require('fs');
const path = require('path');

// Ë®≠ÂÆö
const BUILD_DIR = path.join(__dirname, '../build/static/js');
const MAX_SIZE_MB = Number(process.env.MAX_BUNDLE_SIZE_MB || 1);
const MAX_SIZE_BYTES = MAX_SIZE_MB * 1024 * 1024;

// build„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç
if (!fs.existsSync(BUILD_DIR)) {
  console.error(`‚ùå Build directory not found: ${BUILD_DIR}`);
  console.error('');
  console.error('Please run build first:');
  console.error('  npm run build');
  process.exit(1);
}

// JS„Éï„Ç°„Ç§„É´„ÅÆÂèñÂæóÔºà.map„Éï„Ç°„Ç§„É´„ÇíÈô§Â§ñÔºâ
let files;
try {
  files = fs
    .readdirSync(BUILD_DIR)
    .filter((file) => file.endsWith('.js') && !file.includes('.map'));
} catch (error) {
  console.error(`‚ùå Failed to read build directory: ${error.message}`);
  process.exit(1);
}

if (files.length === 0) {
  console.error(`‚ùå No JavaScript files found in ${BUILD_DIR}`);
  process.exit(1);
}

// „É°„Ç§„É≥„Éê„É≥„Éâ„É´„ÅÆÁâπÂÆö
const mainBundle = files.find((file) => file.startsWith('main.'));
if (!mainBundle) {
  console.error('‚ùå Main bundle not found');
  console.error(`Available files: ${files.join(', ')}`);
  process.exit(1);
}

// „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅÆÂèñÂæó
let size;
try {
  const filePath = path.join(BUILD_DIR, mainBundle);
  const stats = fs.statSync(filePath);
  size = stats.size;
} catch (error) {
  console.error(`‚ùå Failed to get file size: ${error.message}`);
  process.exit(1);
}

// „Çµ„Ç§„Ç∫„É¨„Éù„Éº„ÉàË°®Á§∫
const sizeKB = (size / 1024).toFixed(2);
const sizeMB = (size / (1024 * 1024)).toFixed(2);
const maxMB = MAX_SIZE_MB.toFixed(2);
const usagePercent = ((size / MAX_SIZE_BYTES) * 100).toFixed(1);

console.log('');
console.log('üì¶ Bundle Size Report');
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log(`Main bundle: ${mainBundle}`);
console.log(`Size:        ${sizeKB} KB (${sizeMB} MB)`);
console.log(`Limit:       ${(MAX_SIZE_BYTES / 1024).toFixed(2)} KB (${maxMB} MB)`);
console.log(`Usage:       ${usagePercent}%`);
console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
console.log('');

// ÂÖ®„Éï„Ç°„Ç§„É´„ÅÆ„Çµ„Ç§„Ç∫Ë°®Á§∫
console.log('üìä All JavaScript files:');
files.forEach((file) => {
  const filePath = path.join(BUILD_DIR, file);
  const fileSize = fs.statSync(filePath).size;
  const fileKB = (fileSize / 1024).toFixed(2);
  console.log(`  - ${file}: ${fileKB} KB`);
});
console.log('');

// „Çµ„Ç§„Ç∫„ÉÅ„Çß„ÉÉ„ÇØ
if (size > MAX_SIZE_BYTES) {
  console.error('‚ùå Bundle Size Check Failed');
  console.error('');
  console.error(
    `Main bundle size ${sizeKB} KB exceeds limit ${(MAX_SIZE_BYTES / 1024).toFixed(2)} KB`
  );
  console.error('');
  console.error('Suggestions to reduce bundle size:');
  console.error('  1. Use code splitting (React.lazy)');
  console.error('  2. Analyze bundle with source-map-explorer');
  console.error('  3. Remove unused dependencies');
  console.error('  4. Enable tree shaking');
  console.error('');
  process.exit(1);
}

// ÊàêÂäü
console.log('‚úÖ Bundle Size Check Passed');
console.log('');
console.log(`Main bundle size is within the limit (${usagePercent}% of ${maxMB} MB)`);
console.log('');
process.exit(0);

